edit_r_profile()
install.packages("cli")
install.packages("RSQLite")
install.packages("cli")
library(cli)
remove.packages("cli", lib="~/R/win-library/4.1")
install.packages("cli")
golem::run_dev()
library(golem)
library(cli)
install.packages("cli")
library(cli)
golem::run_debv
golem::run_dev()
install.packages("shinydashboard")
install.packages("nycflights13")
golem::run_dev()
library(shiny)
?selectInput
golem::run_dev()
?updateSelectInput
golem::run_dev()
month.name
golem::run_dev()
month.name
golem::run_dev()
?sliderInput
golem::run_dev()
golem::add_module("results")
golem::run_dev()
remotes::install_github("ColinFay/gargoyle")
golem::run_dev()
r6 <- BusinessLogic$new()
r6$generate_results(
carrier_filter = input$carrier,
month_filter =
r6$months %>%
dplyr::filter(month_name == input$month) %>%
dplyr::pull(month_number),
metric_filter = input$metric,
threshold = 12
)
r6$generate_results(
carrier_filter = "UA",
month_filter =
r6$months %>%
dplyr::filter(month_name == "January") %>%
dplyr::pull(month_number),
metric_filter = "arr_delay",
threshold = 12
)
r6$results
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
!!
!!"bila"
!!bila
golem::run_dev()
?req
golem::run_dev()
?renderText
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
remotes::install_github("Thinkr-open/shinipsum")
golem::run_dev()
?shinipsum::random_ggplot
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
print(month.abb)
print(month.abb, month.name)
print(month.abb)
golem::run_dev()
nycflights13::airlines %>%
dplyr::mutate(name = name %>%
stringr::str_remove_all(" Inc.") %>%
stringr::str_remove_all(" Corporation"))
golem::run_dev()
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(
flat_file = "dev/flat_business-logic.Rmd",
vignette_name = NA,
check = FALSE
)
install.packages("spelling")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(
flat_file = "dev/flat_business-logic.Rmd",
vignette_name = NA,
check = FALSE
)
golem::run_dev()
?sliderInput
golem::run_dev()
install.packages("shinyjs")
golem::run_dev()
?observer
?observe
golem::run_dev()
?observeEvent
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_pkg()
attachment::att_amend_desc()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
styler:::style_active_file()
golem::run_dev()
#' R6 Class for the business logic of the app
#'
#' @description
#' It does the data cleaning and generates text and chart for the app.
#' @export
#' @examples
BusinessLogic <- R6::R6Class(
"BusinessLogic",
public = list(
#' @field months Month numbers and their names.
months = tibble::tibble(
month_number = 1:12,
month_name = month.name
),
#' @field metrics Available metrics.
metrics = c(
"Departure delay" = "dep_delay",
"Arrival delay" = "arr_delay"
),
#' @field data Will store the data..
data = NULL,
#' @field unique_carriers Available carriers.
unique_carriers = NULL,
#' @field results Where results are stored.
results = NULL,
#' @description
#' Create a new business logic object.
#' @return A new `BusinessLogic` object.
initialize = function() {
self$data <- nycflights13::flights
self$unique_carriers <- nycflights13::airlines %>%
dplyr::mutate(name = name %>%
stringr::str_remove_all(" Inc.") %>%
stringr::str_remove_all(" Corporation"))
},
#' @description
#' Generate results.
#' @param carrier_filter Carrier for report.
#' @param month_filter Month for report.
#' @param metric_filter Metric for report.
#' @param threshold Threshold for report.
generate_results = function(
carrier_filter,
month_filter,
metric_filter,
threshold
) {
filtered_data <- self$data %>%
dplyr::filter(
carrier == carrier_filter,
month == month_filter,
.data[[metric_filter]] >= 0
) %>%
dplyr::group_by(day) %>%
dplyr::summarize(metric = mean(.data[[metric_filter]], na.rm = TRUE))
month <- self$months %>%
dplyr::filter(month_number == month_filter) %>%
dplyr::pull(month_name)
carrier <- self$unique_carriers %>%
dplyr::filter(carrier == carrier_filter) %>%
dplyr::pull(name)
number_of_days <- filtered_data %>%
dplyr::filter(metric > threshold) %>%
nrow()
metric <- dplyr::if_else(
metric_filter == "dep_delay",
"departures",
"arrivals"
)
self$results$title <- "{month}: {carrier}" %>%
glue::glue()
self$results$text <- "In {month} {carrier} had {number_of_days} days with {metric} delayed by more than {threshold} minutes." %>%
glue::glue()
self$results$chart <- filtered_data %>%
dplyr::mutate(day = factor(day)) %>%
ggplot2::ggplot(ggplot2::aes(day, metric)) +
ggplot2::geom_line(group = 1) +
ggplot2::geom_hline(
yintercept = threshold,
lty = "dashed",
color = "red"
) +
ggplot2::labs(
title = "Average {metric} delay per day for {carrier} in {month}" %>%
glue::glue(),
x = "Day of the month",
y = "Average delay [minutes]"
)
}
)
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
business_logic$results$text
business_logic$results$chart
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
business_logic$results$title
business_logic$results$text
business_logic$results$chart
test_that("business_logic works", {
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
expect_s3_class(business_logic, "R6")
expect_s3_class(business_logic, "BusinessLogic")
expect_identical(business_logic$data, nycflights13::flights)
expect_identical(business_logic$results$text,
"In January Endeavor Air had 16 days with arrivals delayed by more than 30 minutes.")
vdiffr::expect_doppelganger("Results chart 1", business_logic$results$chart)
business_logic$generate_results("UA", 7, "dep_delay", 12)
expect_identical(business_logic$results$text,
"In July United Air Lines had 30 days with departures delayed by more than 12 minutes.")
vdiffr::expect_doppelganger("Results chart 2", business_logic$results$chart)
})
library(testthat)
test_that("business_logic works", {
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
expect_s3_class(business_logic, "R6")
expect_s3_class(business_logic, "BusinessLogic")
expect_identical(business_logic$data, nycflights13::flights)
expect_identical(business_logic$results$text,
"In January Endeavor Air had 16 days with arrivals delayed by more than 30 minutes.")
vdiffr::expect_doppelganger("Results chart 1", business_logic$results$chart)
business_logic$generate_results("UA", 7, "dep_delay", 12)
expect_identical(business_logic$results$text,
"In July United Air Lines had 30 days with departures delayed by more than 12 minutes.")
vdiffr::expect_doppelganger("Results chart 2", business_logic$results$chart)
})
test_that("business_logic works", {
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
expect_s3_class(business_logic, "R6")
expect_s3_class(business_logic, "BusinessLogic")
expect_identical(business_logic$data, nycflights13::flights)
expect_identical(business_logic$results$text,
"In January Endeavor Air had 16 days with arrivals delayed by more than 30 minutes.")
vdiffr::expect_doppelganger("Results chart 1", business_logic$results$chart)
business_logic$generate_results("UA", 7, "dep_delay", 12)
expect_identical(business_logic$results$text,
"In July United Air Lines had 30 days with departures delayed by more than 12 minutes.")
vdiffr::expect_doppelganger("Results chart 2", business_logic$results$chart)
})
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
business_logic$results$title
business_logic$results$text
business_logic$results$chart
test_that("business_logic works", {
business_logic <- BusinessLogic$new()
business_logic$generate_results("9E", 1, "arr_delay", 30)
expect_s3_class(business_logic, "R6")
expect_s3_class(business_logic, "BusinessLogic")
expect_identical(business_logic$data, nycflights13::flights)
expect_identical(business_logic$results$title,
"January: Endeavor Air")
expect_identical(business_logic$results$text,
"In January Endeavor Air had 16 days with arrivals delayed by more than 30 minutes.")
vdiffr::expect_doppelganger("Results chart 1", business_logic$results$chart)
business_logic$generate_results("UA", 7, "dep_delay", 12)
expect_identical(business_logic$results$text,
"In July United Air Lines had 30 days with departures delayed by more than 12 minutes.")
vdiffr::expect_doppelganger("Results chart 2", business_logic$results$chart)
})
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(
flat_file = "dev/flat_business-logic.Rmd",
vignette_name = NA,
check = FALSE
)
devtools:chec()
devtools::check()
devtools::test()
golem::run_dev()
styler:::style_active_pkg()
devtools::test()
usethis::git_vaccinate()
